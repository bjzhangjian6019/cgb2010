day04
--------------------------------------
1、for循环
   	a.基本语法：
   	b.执行顺序：
   	c.for循环的嵌套：
2、while循环：
	a.基本语法：
   	b.执行顺序:
   do-while的循环：
    a.基本语法：
   	b.执行顺序:
3、三者的区别：
4、break和continue的使用与区别
5、Random的使用
----------------------------------------------
作业：
	1、for循环实现：
	   求【0,100】中，奇数的个数
	   求【0,100】中，4的倍数的和
	2、
	1/(1 * 3) + 1/(3 * 5) + 1/(5 * 7) + 1/(7 * 9) +…  …
	3、1)打印100-999之间的水仙花数 
	   2)获取100-999之间水仙花的个数
	      水仙花数：
	      就是一个三位数，其中各位数字的立方和等于这个数本身。
	   
	   153=1*1*1+5*5*5+3*3*3
	   153就是水仙花数。
	4、输出斐波拉契数列的前20项的值分别是多少？-----扩展
		其中数列：1，1，2，3，5，8，13… …
package cn.tedu.demo;
/**
 * 作业：
 * 输出斐波拉契数列的前20项的值分别是多少？-----扩展
		其中数列：1，1，2，3，5，8，13....
	第一项：1
	第二项：1
	第三项：前两项的和：  1+1=2
	第四项：前两项(第二项和第三项的和)：1+2=3;
	....
 * @author Administrator
 *
 */
public class Test {
	public static void main(String[] args) {
		for (int i = 1; i <= 20; i++) {
			System.out.println(fun(i));
		}
	}
	//设计方法：利用递归的思路实现
	public static int fun(int n) {
		//第一项和第二项都是1
		if (n == 1 || n == 2) {
			return 1;
		}
		if (n > 2) {//从第三项开始
			//n=1-----fun(1)
			//n=2-----fun(2)
			//n=4-----fun(2)+fun(3)
			// n---- fun(n-2)+fun(n-1)
			return fun(n-2) + fun(n-1);
		}
		return -1;
	}
	/**
	 * 练习：求10！
	 * 3！=3*2*1
	 * 4！=4*3*2*1
	 * 5！=5*4*3*2*1   5*f(4)
	 * n*f(n-1);
	 */
}

---------------------------------------------
一、变量-------------------【掌握】
	1、特点：
	出现的位置不同，变量的名称、作用、使用范围也就不一样
	成员位置/变量：在类的内部，方法的外部
	局部变量/位置：在方法的内部
	2、局部变量
		在方法的内部，作用范围就是方法的内部，定义的时候，要手动进行初始化
	3、成员变量
		在类的内部，方法的外部，作用范围就是整个类中，不用进行初始化也可以
	4、使用：
		Demo01
--------------------------------------------------------		
		package cn.tedu.demo;
/**
 * 变量：
 * 	成员变量和局部变量
 * 
 * @author Administrator
 *
 */
public class Demo01 {
	//成员变量:定义在方法外部，类内部，不用进行初始化也可以
	static int num;//默认值是0
	static double num2;//默认值是0.0
	static boolean num3;//默认值是false
	
	public static void main(String[] args) {
		//局部变量：定义在方法内部，作用范围就是方法内部,必须要进行初始化
		int num4 = 5;
		System.out.println(num4);//局部变量
//		byte num5;
//		System.out.println(num5);//编译就不通过，使用的是局部变量
		//在我们同时使用局部变量和成员变量的时候，
		//如果局部变量名和成员变量名相同的时候，优先使用局部变量。
		int num = 10;
		System.out.println(num);//10---就近原则
		
		System.out.println(num);//0,使用的是成员变量
		System.out.println(num2);//0.0,使用的是成员变量
		
		if (!num3) {//只有条件成立的情况下true，才执行
			System.out.println("我爱你！！！");
		}
		
	}
	

}
		
----------------------------------------------------		
二、方法--------【掌握】
	1、基本概念：
		封装了一段具有特定的业务逻辑的功能的代码块
		方法尽可能的独立，让一个方法去干一件事就可以
		方法也可以被反复的重复的调用
		减少代码的重复，有利于后期开发的维护
		减少团队开发的成本，提高开发的效率。
		复用性。
	2、基本语法：
		方法的修饰符  方法的返回值类型  方法名称(参数列表){
			方法体;
		}
		修饰符：public  static (目前使用)
		返回值类型：限定返回值的具体的类型
		方法名：起好名字，方便调用。---命名规范：驼峰命名法
		参数列表：(参数类型 参数名称,参数类型 参数名称...)
		参数名称：用于接收代用方法的时候，传入的数据的变量
		方法体：具体的业务逻辑的代码的实现
	3、方法的使用：
		Demo02
		
		package cn.tedu.demo;
/**
 * 方法的使用：
	 * 方法在什么时候执行？----被调用的时候，进行执行
	 * 方法的语法？----怎么写一个方法
 * @author Administrator
 */
public class Demo02 {
	
	public static void main(String[] args) {
		System.out.println("1");
		System.out.println("2");
		
		//调用say方法
		say();
		
		System.out.println("3");
		System.out.println("4");
	}
	//写一个say方法:基本语法：
	public static void say() {
		System.out.println("5");
		System.out.println("6");
	}
}
--------------------------------------------
Demo03：方法的传参

package cn.tedu.demo;
/**
 * 方法的传参：
 * 总结：
 * 1、方法的参数列表：可以有，可以无;如果是多个参数，用逗号分隔开
 * 2、面试题：实参与形参的区别
 *    实参：是进行方法的调用的时候，传入的实际参数
 *    sum2(3,2);
 *    形参：是在定义方法的时候，参数列表李规范写的参数的类型 参数名
 *    sum3(int x ,int y, String str)
 * 3、  匹配关系：方法名要匹配+参数类型也要进行匹配
 * @author Administrator
 */
public class Demo03 {
	public static void main(String[] args) {
		//方法的调用------注意参数不要乱给,参数的类型要匹配
		sum(5);
//		sum(qwer);
		sum2(3, 2);
		sum3(1, 3, "Love you");
		sum4("love", 52, 0);
	}
	//定义一个方法:sum(参数的类型 参数名称)
	public static void sum(int x) {
		System.out.println(x);
	}
	//定义一个方法：sum2(参数的类型 参数名称)
	public static void sum2(int x, int y) {
		System.out.println(x+y);
	}
	//定义一个方法：sum3(参数的类型 参数名称)
	public static void sum3(int x, int y, String str) {
		System.out.println(x+y+str);
	}
	//定义一个方法：sum4(参数的类型 参数名称)
	public static void sum4(String str, int x, int y) {
		System.out.println(str+x+y);
	}
}
----------------------------------------------------------
Demo04:
方法的返回值：
		
package cn.tedu.demo;
/**
 * 方法的返回值：
 * 总结：
 * 1、使用return关键字，把结果的返回值给了调用的位置
 * 2、确定方法的返回值类型，如果没有任何返回值，那就使用void
 * 		如果有返回值，要看参与运算后得到结果的数据类型,
 * 		return后跟的数据类型，就是要在方法中返回的数据类型。
 * @author Administrator
 */
public class Demo04 {
	
	public static void main(String[] args) {
		//方法的调用
		int s = sum(3, 5);
		System.out.println(s);
		String str = sum2("love", 52, 1);
		System.out.println(str);
		String str2 = sum3("love");
		System.out.println(str2);
		sum4();
	}
	//写一个方法:return 
	public static int sum(int x, int y) {
		return x + y;//3+5=8把计算的结果，返回给调用的位置
	}
	//写一个方法：return 
	public static String sum2(String s, int x, int y) {
		return s + x + y;
	}
	//写一个方法：return 
	public static String sum3(String s) {
		return s + "1314";
	}
	public static void sum4() {
		System.out.println("void方法");
	}
}
-------------------------------------------------------
方法重载:overload
	1、是发生在一个类中，方法名称相同，参数列表(个数、类型)不同。
	
	Demo05
	
	package cn.tedu.demo;

/**
 * 方法的重载：
 * 	一个类中,方法名称相同，参数列表不同
 * @author Administrator
 */
public class Demo05 {
	public static void main(String[] args) {
		//方法的调用
		sum("哈哈哈", 123);
		
	}
	//方法的重载
	public static void sum(int x, int y) {
		System.out.println(x + y);
	}
	public static void sum(int x, int y, int z) {
		System.out.println(x + y + z);
	}
	public static void sum(String x, int y) {
		System.out.println(x + y);
	}
	public static void sum(String x, int y, int z) {
		System.out.println(x + y + z);
	}
	public static void sum(int y, int z, String x) {
		System.out.println(x + y + z);
	}
	
	/*	练习：
	 * 写一个print方法的重载：
	 * 打印int/double/String/boolean/char
	 */
}
----------------------------------------------------------

/*	练习：
	 * 写一个print方法的重载：
	 * 打印int/double/String/boolean/char
	 */
	 
	 Demo06

/**
 * 	练习：
 * 写一个print方法的重载：
 * 打印int/double/String/boolean/char
 */
public class Demo06 {
	
	public static void main(String[] args) {
		print(123);
		print('燕');
		print("燕京理工学院");
		print(3.14);
		print(true);
	}
	//重载
	public static void print(int x) {
		System.out.println(x);
	}
	public static void print(double x) {
		System.out.println(x);
	}
	public static void print(String x) {
		System.out.println(x);
	}
	public static void print(boolean x) {
		System.out.println(x);
	}
	public static void print(char x) {
		System.out.println(x);
	}
}

---------------------------------------------------------	
三、数组：
	1、基本概念
		Array---数组  -----[]
		数组是存储多个相同类型的元素的集合/容器。
		数组的下标/索引/脚标  是默认从0开始的
		数组如果一旦创建，长度是不可变的。
	2、创建一个数组对象
		基本语法格式：
		数组类型[] 数组名 = new 数组类型[数组的容量的大小];
		数组的声明：
			数据类型[] 数组名-----推荐使用
			数据类型  数组名[]
		
		数组初始化：
			动态初始化：
			元素的个数在初始化的时候就给定了,默认值就是数组中数据类型的默认值.
			int[] arr = new int[3];
			静态初始化：
			在初始化过程中，就已经给定了一定的初始值,元素的个数就是数组的长度.
			int[] arr = {1,3,5};
		
		Demo07
		
		package cn.tedu.demo;
/**
 * 数组的初始化
 * @author Administrator
 *
 */
public class Demo07 {
	
	public static void main(String[] args) {
		//动态初始化:
		int[] arr = new int[3];
		System.out.println(arr);//[I@15db9742  地址
		System.out.println(arr[0]);//0
		System.out.println(arr[1]);//0
		System.out.println(arr[2]);//0
		
		//静态初始化
		int[] arr2 = {1,3,5,7};
		System.out.println(arr2[0]);
		System.out.println(arr2[1]);
		System.out.println(arr2[2]);
		System.out.println(arr2[3]);
		
		//char： h e l l o
		char[] arr3 = {'h','e','l','l','o'};
		char[] arr4 = new char[] {'h','e','l','l','o'};
		System.out.println(arr3);
		System.out.println(arr3.length);
		System.out.println(arr4.length);
		
		char[] arr5 = new char[5];
		arr5[0] = 'h';
		arr5[1] = 'e';
		arr5[2] = 'l';
		arr5[3] = 'l';
		arr5[4] = 'o';
		System.out.println(arr5);
		//ArrayIndexOutOfBoundsException
		arr5[5] = '1';
		System.out.println(arr5[5]);
		System.out.println("1234567");
	}
}
------------------------------------------	
	需求：求数组中奇数的个数。---方法封装
		主函数中进行调用。
	数组的遍历：for循环。
	for(int i = 0; i < 5; i++){
		syso(arr[i]);
	}
	Demo09:
	package cn.tedu.demo;

import java.util.Random;

/**
 * 需求：求数组中奇数的个数。---方法封装
	主函数中进行调用。
*/
public class Demo09 {

	public static void main(String[] args) {
		numbers();
		testArr1();
	}
	//求数组中奇数的个数
	//设计方法
	public static void numbers() {
		//1、创建数组
		int[] arr = {12,34,56,76,75,3,1,88,93};
		//定义一个变量，用来存储奇数的个数
		int count = 0;
		//遍历数组
		for (int i = 0; i < arr.length; i++) {
			//取出每一个数组 中的元素
			//判断是不是奇数
			if (arr[i] % 2 == 1) {//true，奇数
				//个数加+
				count++;
				System.out.println(arr[i]);
			}
		}
		//打印出奇数的个数
		System.out.println("数组中奇数的个数为：" + count);
	}
	
	//创建一个数组，存放随机数
	public static void testArr1() {
		//创建数组
		int[] arr = new int[10];
		//遍历数组，修改默认值
		for (int i = 0; i < arr.length; i++) {
			arr[i] = new Random().nextInt(100);
		}
		//打印出来
		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
	}
}
------------------------------------------
	Demo08：数组的遍历
	
	package cn.tedu.demo;
/**
 * 数组的遍历：
 * arr[0]
 * for循环
 * @author Administrator
 *
 */
public class Demo08 {

	public static void main(String[] args) {
		
		int[] arr = {34,2,12,67,3};
		//遍历出每一个元素
//		System.out.println(arr[0]);
//		System.out.println(arr[1]);
//		System.out.println(arr[2]);
//		System.out.println(arr[3]);
//		System.out.println(arr[4]);
		
		//for循环解决遍历数组的元素
		/*
		 * 初始位置：从0开始
		 * 最大范围: 最大下标arr.length - 1
		 * i++:数组下标的变化，有顺序的。
		 * i数组的下标
		 */
		for (int i = 0; i <= arr.length - 1; i++) {
			//根据数组的下标进行打印
			System.out.println(arr[i]);
		}
	}
}
----------------------------------------------------
	作业：封装方法，调用方法
	
	1、递归：9+7+5+3+1的值
	----------------------------------
	管理员录入10位学生的Java成绩，
	2、获取数组中的最高成绩和最低成绩
	3、获取数组中的数据总和和平均值
	4、获取数据中所有的偶数，并求偶数的和
		
------------------------------------------		
	3、数组的应用
	
	





